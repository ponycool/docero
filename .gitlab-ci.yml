stages:
  - build
  - release

build:
  stage: build
  image: 10.0.0.20/ponycool/alpine:3.22
  variables:
    GO_VERSION: 1.24.5
  before_script:
    - apk update
    - apk add bash make wget tar gcc musl-dev
    # 安装GO环境
    - wget https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz
    - tar -C /usr/local -zxf go${GO_VERSION}.linux-amd64.tar.gz
    - export PATH=$PATH:/usr/local/go/bin
    - go version
    # 配置GO代理
    - export GO111MODULE=on
    - go env -w GOPROXY=https://goproxy.cn,direct
  script:
    - make build
  artifacts:
    name: "task-$CI_PIPELINE_ID"
    paths:
      - task
    expire_in: 1 week

release:
  stage: release
  image: 10.0.0.20/library/docker:latest
  variables:
    DOCKER_IMAGE_NAME: 10.0.0.20/kuma/docero:$CI_COMMIT_REF_SLUG
  dependencies:
    - build
  before_script:
    - docker login "$CI_REGISTRY_SERVER" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    # 手动启动 DinD 容器，仅services 配置来启动 Docker-in-Docker无法执行时，使用手动启动DinD 容器
    - CONTAINER_NAME=dind-service
    # 尝试删除容器，如果不存在则忽略错误
    - docker container rm -f $CONTAINER_NAME || true
    - docker run --name $CONTAINER_NAME -d --privileged -p 127.0.0.1:2375:2375 -v /var/run/docker.sock:/var/run/docker.sock docker:dind
  script:
    - docker build -t "$DOCKER_IMAGE_NAME" .
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
    - |
      if echo "$CI_COMMIT_TAG" | grep -Eq '^v[0-9]+(\.[0-9]+)*$'; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
        docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      exists:
        - Dockerfile